name: Continuous Integration

on:
    pull_request:
    push:
        branches:
            - main

permissions:
    contents: read

jobs:
    #  test-javascript:
    #    name: JavaScript Tests
    #    runs-on: ubuntu-latest
    #
    #    steps:
    #      - name: Checkout
    #        id: checkout
    #        uses: actions/checkout@v4
    #
    #      - name: Setup Node.js
    #        id: setup-node
    #        uses: actions/setup-node@v4
    #        with:
    #          node-version-file: .node-version
    #          cache: npm
    #
    #      - name: Install Dependencies
    #        id: npm-ci
    #        run: npm ci
    #
    #      - name: Check Format
    #        id: npm-format-check
    #        run: npm run format:check
    #
    #      - name: Lint
    #        id: npm-lint
    #        run: npm run lint
    #
    #      - name: Test
    #        id: npm-ci-test
    #        run: npm run ci-test

    test-action:
        name: GitHub Actions Test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              id: checkout
              uses: actions/checkout@v4

            - name: Test local action 'Wait for Response' with Futurama
              id: waitForResponse1
              uses: schwarzland/wait-for-response-action@main
              with:
                  url: 'https://api.sampleapis.com/futurama/info'
                  method: 'GET'
                  headers: '{ "accept":"application/json" }'
                  body: ''
                  body-reading-method: 'JSON'
                  http-status: '200'
                  timeout: '5000'
                  single-fetch-timeout: '1000'
                  waiting-time: '1000'

            - name: Print Output
              run: |
                  echo duration=${{ steps.waitForResponse1.outputs.duration }}
                  echo actual http-status=${{ steps.waitForResponse1.outputs.http-status }}
                  echo response=${{ toJSON(steps.waitForResponse1.outputs.response) }}

            - name: Test local action 'Wait for Response' with Telekom
              id: waitForResponse2
              uses: schwarzland/wait-for-response-action@main
              with:
                  url: 'https://www.telekom.de'
                  body-reading-method: 'TEXT'

            - name: Print Output
              run: |
                  echo duration=${{ steps.waitForResponse2.outputs.duration }}
                  echo actual http-status=${{ steps.waitForResponse2.outputs.http-status }}
                  echo response=${{ toJSON(steps.waitForResponse2.outputs.response) }}
