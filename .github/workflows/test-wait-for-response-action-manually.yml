name: Example Workflow

on:
  workflow_dispatch:
    inputs:
      url:
        description: The URL to be checked
        required: true
        default: 'https://api.sampleapis.com/simpsons/characters'
        type: string

      desired-method:
        description: Allowed methods are GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS
        required: true
        default: 'GET'
        type: string
        options:
          - GET
          - POST
          - PUT
          - PATCH
          - DELETE
          - HEAD
          - OPTIONS

      request-headers:
        description: Request Headers in JSON-Format
        required: false
        default: '{ "accept":"application/json" }'
        type: string

      expected-http-status:
        description: The expected http status
        required: false
        default: '200'
        type: string

      interval:
        description: The interval (milliseconds) determines how often the URL should be checked.
        required: false
        default: '1000'
        type: string

      timeout:
        description: The timeout (milliseconds) determines when the check should be aborted.
        required: false
        default: '5000'
        type: string

      abort-at-timeout:
        description:
          Should the action be aborted on timeout (true), or should it continue running (false)
        required: false
        default: true
        type: boolean

permissions:
  actions: read
  contents: read

jobs:
  wait-for-response-test:
    name: Tests the Wait-For-Response-Action manually
    runs-on: ubuntu-latest

    steps:
      # Change @main to a specific commit SHA or version tag, e.g.:
      # actions/hello-world-javascript-action@e76147da8e5c81eaf017dede5645551d4b94427b
      # actions/hello-world-javascript-action@v1.2.3
      - name: Test Wait for Response
        id: waitForResponse
        uses: schwarzland/wait-for-response-action@main
        with:
          url: ${{ inputs.url }}
          desired-method: ${{ inputs.desired-method }}
          request-headers: ${{ inputs.request-headers }}
          expected-http-status: ${{ inputs.expected-http-status }}
          interval: ${{ inputs.interval }}
          timeout: ${{ inputs.timeout }}
          abort-at-timeout: ${{ inputs.abort-at-timeout }}

      - name: Print Output
        id: output
        run: |
          echo time ${{ steps.waitForResponse.outputs.time }}
          echo timeout-reached ${{ steps.waitForResponse.outputs.timeout-reached }}
          echo httpStatus ${{ steps.waitForResponse.outputs.httpStatus }}

#          echo response ${{ steps.waitForResponse.outputs.response }}
